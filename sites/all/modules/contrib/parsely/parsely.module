<?php
/**
 * @file
 * The main module file.
 */

define('_PARSELY_VERSION', '0.1');

include_once 'Parsely.php';
include_once 'ParselySettings.inc';

function _parsely_get_settings($vars=NULL) {
  $vars = array();
  $parsely_settings = &drupal_static(__FUNCTION__);
  
  if (!isset($parsely_settings)) {
    $parsely_settings = new ParselySettings($vars); 
  }

  return $parsely_settings;
}


/**
 * Implements hook_menu().
 */
function parsely_menu() {
  $items['admin/config/search/parsely'] = array(
    'title'            => 'Parse.ly',
    'description'      => 'Parse.ly configuration settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('parsely_admin_settings'),
    'access arguments' => array('administer parsely settings'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'parsely.admin.inc',
  );
  $items['admin/config/search/parsely/options'] = array(
    'title' => 'Options',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function parsely_permission() {
  return array(
  'administer parsely settings' => array(
    'title' => t('Administer Parse.ly settings'),
  ),
  );
}

/**
 * Implements hook_init().
 */
function parsely_init() { 
  $vars = array();
  $parsely_settings= _parsely_get_settings($vars);
  $apikey = $parsely_settings->getApiKey();
  if (parsely_should_add_metas()) { 
    $parsely_meta = _parsely_get_node_metadata();

    drupal_add_html_head(array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'drupal_parsely_version',
        'id' => 'drupal_parsely_version',
        'content' => _PARSELY_VERSION
      )
    ), 'parsely_version');
    
    drupal_add_html_head(array(
      '#tag' => 'script',
      '#attributes' => array('type' => 'application/ld+json', 'content' => 'Parsely metadata'),
      '#value' => json_encode($parsely_meta),
    ), 'parsely_metadata');
  }
}

/**
 * Determines whether or not to place the parsely meta tag on a page. This is
 * separate from should_track because we don't need to consider whether users
 * are authenticated here.
 */
function parsely_should_add_metas() {

  $parsely_settings= _parsely_get_settings();
  $node = menu_get_object();

  if ($node === NULL) {
    return FALSE;
  }

  // This may appear verbose but fixes the write context error. 
  $hasApiKey = $parsely_settings->getApiKey();
  if (empty($hasApiKey)) {
    return FALSE;
  } 

  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  $paths_to_ignore = parsely_paths_to_ignore();
  if(!empty($paths_to_ignore)) { 

    $pathsToIgnore = preg_split('/[\s]+/', $paths_to_ignore);    

    foreach ($pathsToIgnore as $ignore_path) {
    
      if (drupal_match_path($path, $ignore_path))
      { 
      return FALSE;
      } 
    }
  }
  
  return TRUE;
}

/**
 * Are we on an ignored path? 
 * 
 */
function parsely_paths_to_ignore() {
    $parsely_settings= _parsely_get_settings();
    return $parsely_settings->getPathsToIgnore();
}

/**
 * Do we have a trackable user?
 */
function parsely_should_track() {
  if (!parsely_should_add_metas() ) {
    return FALSE;
  }
  
  $parsely_settings= _parsely_get_settings();
  $should_track_auth_users = $parsely_settings->getTrackAuth() === '0';
  if ($should_track_auth_users && _parsely_user_is_authenticated()) {
    return FALSE;
  }

  return TRUE;
}

function _parsely_user_is_authenticated() {
  // Anonymous users have a uid of 0; anyone else > 0 is authenticated
  global $user;
  return $user->uid !== 0;
}

/*
 * @function parsely_track_node
 * Are we on a trackable node? 
 */
function parsely_track_node($node, $parsely_settings) { 
  
  $track_node =  &drupal_static(__FUNCTION__);
  
  if (isset($track_node)) { 
    return $track_node; 
  } else {
    $node_types = node_type_get_types();
    $node_tracking = $parsely_settings->getNodeTypes();
    
    foreach ($node_tracking as $key => $node_type) {
      if ($node->type == $node_type) { 
        $parsely_track = TRUE; 
        $tracked_type = $node_type;
        foreach ($node_types as $nodetype => $data){
          if ($data->type == $tracked_type) { 
          $bid = $nodetype; 
          }  
        }
        $track_node = $node_types[$nodetype]->name; 
        return $track_node;
      } else { 
      
      return FALSE;
      }
    }   
  }
}

/**
 * Implements hook_page_build to insert Parse.ly's JavaScript tracker.
 */
function parsely_page_build(&$page) {
  $parsely_settings= _parsely_get_settings();

 if (!parsely_should_track() && !drupal_is_front_page()) {
    return;
  }

  $apikey = check_plain($parsely_settings->getApiKey());
  $markup = <<<EOT

<!-- START Parse.ly Include: Standard -->
<div id="parsely-root" style="display: none">
  <div id="parsely-cfg" data-parsely-site="$apikey"></div>
</div>
<script>
(function(s, p, d) {
  var h=d.location.protocol, i=p+"-"+s,
    e=d.getElementById(i), r=d.getElementById(p+"-root"),
    u=h==="https:"?"d1z2jf7jlzjs58.cloudfront.net"
    :"static."+p+".com";
  if (e) return;
  e = d.createElement(s); e.id = i; e.async = true;
  e.src = h+"//"+u+"/p.js"; r.appendChild(e);
})("script", "parsely", document);
</script>
<!-- END Parse.ly Include: Standard -->
EOT;
  $page['page_bottom']['parsely'] = array('#markup' => $markup);
}

function _parsely_get_node_metadata() {
  $node = menu_get_object(); 
  $parsely_settings = _parsely_get_settings();
  
  $parsely_data = &drupal_static(__FUNCTION__);  
  if (!isset($parsley_data)) {
    $parsely_data = new Parsley($node); 
  }
  
  $parsely_meta = &drupal_static(__FUNCTION__);
  if (!isset($parsley_meta)) {
 
    $parsely_meta = array(
      '@context'       => 'http://schema.org',
      '@type'          => '', 
      'articleId'      => $parsely_data->getID($node),
      'creator'        => $parsely_data->getCreator(),  
      'dateCreated'    => $parsely_data->getDate($node),
      'headline'       => $node->title,
      'url'            => $parsely_data->getURL($node),     
      'keywords'       => $parsely_data->getTags(),
      'articleSection' => $parsely_data->getSection(),
    );
  }

  // Is the default image overridden?  
  $uri = $thumbUrlSetting = $parsely_settings->getThumbnailUrl();
  if(empty($thumbUrlSetting)){
    $thumbUrlSetting = $parsely_settings->getImageField();
  }
  
  // Get thummbnailURL. If individual image is not set, use site logo.
  foreach ($node as $nodeKey => $image_field) {
    $nodeKey == $thumbUrlSetting ? $uri = $image_field : $uri;  
  }
   if(isset($uri['und'][0]['uri'])) {
    $parsely_meta['thumbnailUrl'] = file_create_url($uri['und'][0]['uri']);
  } else {
    $parsely_meta['thumbnailUrl'] = theme_get_setting('logo');
  }
  
  // Fetch the node type. NB. We don't use the bundle name, but a valid schema.org type.
  // $parsely_meta['@type'] = parsely_track_node($node, $parsely_settings);
  $parsely_meta['@type'] = 'NewsArticle';
  
  // Allow modules to alter the default metadata for this node. 
  drupal_alter('parsely_node_metadata', $parsely_meta, $node);

  // @Debugging. (Verbose syntax avoids write context errors in certain versions of php.)
  $debug = $parsely_settings->getDebug();
  if(user_access('administer parsely settings')) {
    if ( $debug == 1) { 
    // @TODO: Loop through debug array and print all messages.
    $parsely_debug_msg = $parsely_settings->getDebugMsg();
    if ($parsely_debug_msg) {
      echo '<pre>' . key($parsely_debug_msg) . ' ' . array_pop($parsely_debug_msg) . '</pre>';
      }
    echo '<pre>'; print_r($parsely_meta); echo '</pre>';
    
    }   
  } 
  return $parsely_meta;
}

